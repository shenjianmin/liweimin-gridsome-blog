type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

input createDynamicInput {
  data: DynamicInput
}

type createDynamicPayload {
  dynamic: Dynamic
}

input createFanInput {
  data: FanInput
}

type createFanPayload {
  fan: Fan
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteDynamicInput {
  where: InputID
}

type deleteDynamicPayload {
  dynamic: Dynamic
}

input deleteFanInput {
  where: InputID
}

type deleteFanPayload {
  fan: Fan
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Dynamic {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  img: UploadFile
  published_at: DateTime
}

type DynamicAggregator {
  count: Int
  totalCount: Int
}

type DynamicConnection {
  values: [Dynamic]
  groupBy: DynamicGroupBy
  aggregate: DynamicAggregator
}

type DynamicConnectionCreated_at {
  key: DateTime
  connection: DynamicConnection
}

type DynamicConnectionDescription {
  key: String
  connection: DynamicConnection
}

type DynamicConnectionId {
  key: ID
  connection: DynamicConnection
}

type DynamicConnectionImg {
  key: ID
  connection: DynamicConnection
}

type DynamicConnectionPublished_at {
  key: DateTime
  connection: DynamicConnection
}

type DynamicConnectionTitle {
  key: String
  connection: DynamicConnection
}

type DynamicConnectionUpdated_at {
  key: DateTime
  connection: DynamicConnection
}

type DynamicGroupBy {
  id: [DynamicConnectionId]
  created_at: [DynamicConnectionCreated_at]
  updated_at: [DynamicConnectionUpdated_at]
  title: [DynamicConnectionTitle]
  description: [DynamicConnectionDescription]
  img: [DynamicConnectionImg]
  published_at: [DynamicConnectionPublished_at]
}

input DynamicInput {
  title: String
  description: String
  img: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDynamicInput {
  title: String
  description: String
  img: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFanInput {
  name: String
  content: String
  img: ID
  url: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editProjectInput {
  title: String
  url: String
  fork: Int
  mark: Int
  watch: Int
  description: String
  content: String
  tags: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editTagInput {
  title: String
  projects: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type Fan {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  content: String!
  img: UploadFile
  url: String!
  published_at: DateTime
}

type FanAggregator {
  count: Int
  totalCount: Int
}

type FanConnection {
  values: [Fan]
  groupBy: FanGroupBy
  aggregate: FanAggregator
}

type FanConnectionContent {
  key: String
  connection: FanConnection
}

type FanConnectionCreated_at {
  key: DateTime
  connection: FanConnection
}

type FanConnectionId {
  key: ID
  connection: FanConnection
}

type FanConnectionImg {
  key: ID
  connection: FanConnection
}

type FanConnectionName {
  key: String
  connection: FanConnection
}

type FanConnectionPublished_at {
  key: DateTime
  connection: FanConnection
}

type FanConnectionUpdated_at {
  key: DateTime
  connection: FanConnection
}

type FanConnectionUrl {
  key: String
  connection: FanConnection
}

type FanGroupBy {
  id: [FanConnectionId]
  created_at: [FanConnectionCreated_at]
  updated_at: [FanConnectionUpdated_at]
  name: [FanConnectionName]
  content: [FanConnectionContent]
  img: [FanConnectionImg]
  url: [FanConnectionUrl]
  published_at: [FanConnectionPublished_at]
}

input FanInput {
  name: String!
  content: String!
  img: ID
  url: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Dynamic | DynamicConnection | DynamicAggregator | DynamicGroupBy | DynamicConnectionId | DynamicConnectionCreated_at | DynamicConnectionUpdated_at | DynamicConnectionTitle | DynamicConnectionDescription | DynamicConnectionImg | DynamicConnectionPublished_at | createDynamicPayload | updateDynamicPayload | deleteDynamicPayload | Fan | FanConnection | FanAggregator | FanGroupBy | FanConnectionId | FanConnectionCreated_at | FanConnectionUpdated_at | FanConnectionName | FanConnectionContent | FanConnectionImg | FanConnectionUrl | FanConnectionPublished_at | createFanPayload | updateFanPayload | deleteFanPayload | Project | ProjectConnection | ProjectAggregator | ProjectAggregatorSum | ProjectAggregatorAvg | ProjectAggregatorMin | ProjectAggregatorMax | ProjectGroupBy | ProjectConnectionId | ProjectConnectionCreated_at | ProjectConnectionUpdated_at | ProjectConnectionTitle | ProjectConnectionUrl | ProjectConnectionFork | ProjectConnectionMark | ProjectConnectionWatch | ProjectConnectionDescription | ProjectConnectionContent | ProjectConnectionPublished_at | createProjectPayload | updateProjectPayload | deleteProjectPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_at | TagConnectionUpdated_at | TagConnectionTitle | TagConnectionPublished_at | createTagPayload | updateTagPayload | deleteTagPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createDynamic(input: createDynamicInput): createDynamicPayload
  updateDynamic(input: updateDynamicInput): updateDynamicPayload
  deleteDynamic(input: deleteDynamicInput): deleteDynamicPayload
  createFan(input: createFanInput): createFanPayload
  updateFan(input: updateFanInput): updateFanPayload
  deleteFan(input: deleteFanInput): deleteFanPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Project {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  url: String
  fork: Int
  mark: Int
  watch: Int
  description: String
  content: String
  published_at: DateTime
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type ProjectAggregator {
  count: Int
  totalCount: Int
  sum: ProjectAggregatorSum
  avg: ProjectAggregatorAvg
  min: ProjectAggregatorMin
  max: ProjectAggregatorMax
}

type ProjectAggregatorAvg {
  fork: Float
  mark: Float
  watch: Float
}

type ProjectAggregatorMax {
  fork: Float
  mark: Float
  watch: Float
}

type ProjectAggregatorMin {
  fork: Float
  mark: Float
  watch: Float
}

type ProjectAggregatorSum {
  fork: Float
  mark: Float
  watch: Float
}

type ProjectConnection {
  values: [Project]
  groupBy: ProjectGroupBy
  aggregate: ProjectAggregator
}

type ProjectConnectionContent {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionCreated_at {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionDescription {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionFork {
  key: Int
  connection: ProjectConnection
}

type ProjectConnectionId {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionMark {
  key: Int
  connection: ProjectConnection
}

type ProjectConnectionPublished_at {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionTitle {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionUpdated_at {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionUrl {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionWatch {
  key: Int
  connection: ProjectConnection
}

type ProjectGroupBy {
  id: [ProjectConnectionId]
  created_at: [ProjectConnectionCreated_at]
  updated_at: [ProjectConnectionUpdated_at]
  title: [ProjectConnectionTitle]
  url: [ProjectConnectionUrl]
  fork: [ProjectConnectionFork]
  mark: [ProjectConnectionMark]
  watch: [ProjectConnectionWatch]
  description: [ProjectConnectionDescription]
  content: [ProjectConnectionContent]
  published_at: [ProjectConnectionPublished_at]
}

input ProjectInput {
  title: String
  url: String
  fork: Int
  mark: Int
  watch: Int
  description: String
  content: String
  tags: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  dynamic(id: ID!, publicationState: PublicationState): Dynamic
  dynamics(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Dynamic]
  dynamicsConnection(sort: String, limit: Int, start: Int, where: JSON): DynamicConnection
  fan(id: ID!, publicationState: PublicationState): Fan
  fans(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Fan]
  fansConnection(sort: String, limit: Int, start: Int, where: JSON): FanConnection
  project(id: ID!, publicationState: PublicationState): Project
  projects(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Project]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectConnection
  tag(id: ID!, publicationState: PublicationState): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  published_at: DateTime
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionPublished_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionTitle {
  key: String
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  title: [TagConnectionTitle]
  published_at: [TagConnectionPublished_at]
}

input TagInput {
  title: String
  projects: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateDynamicInput {
  where: InputID
  data: editDynamicInput
}

type updateDynamicPayload {
  dynamic: Dynamic
}

input updateFanInput {
  where: InputID
  data: editFanInput
}

type updateFanPayload {
  fan: Fan
}

input updateProjectInput {
  where: InputID
  data: editProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
